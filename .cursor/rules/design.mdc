---
description: 
globs: 
alwaysApply: true
---
# Design

## 설계 원칙

### 1. Event-Driven Architecture
- **비동기 처리**: 각 컴포넌트 간 느슨한 결합
- **확장성**: 이벤트 기반 수평 확장 가능
- **복원력**: 장애 시 격리 및 복구 용이

### 2. Infrastructure as Code
- **GitOps**: 모든 인프라 설정을 Git으로 관리
- **Helm Charts**: 버전 관리 및 일관된 배포
- **Declarative**: 선언적 설정으로 예측 가능한 상태

### 3. Container-First Design
- **Immutable**: 컨테이너 이미지 불변성 보장
- **Stateless**: 상태 정보는 외부 저장소에 분리
- **12-Factor App**: 클라우드 네이티브 설계 원칙 준수

## 아키텍처 패턴

### Workflow Orchestration Pattern
```yaml
# 4-Step DAG 패턴
prepare-dataset:
  inputs: [model_tag, dataset_version]
  outputs: [processed_dataset_path]

deepeval-runner:
  depends: [prepare-dataset]
  inputs: [processed_dataset_path, model_endpoint]
  outputs: [deepeval_results.json]

evalchemy-runner:
  depends: [prepare-dataset]
  inputs: [processed_dataset_path, model_endpoint]
  outputs: [evalchemy_results.json]

aggregate-metrics:
  depends: [deepeval-runner, evalchemy-runner]
  inputs: [deepeval_results.json, evalchemy_results.json]
  outputs: [aggregated_metrics.json]
```

### Observer Pattern (모니터링)
- **Subject**: Workflow 실행 상태
- **Observers**: Prometheus Exporter, Teams Webhook, Grafana
- **Notification**: 상태 변화 시 모든 옵저버에게 알림

### Strategy Pattern (평가 전략)
```python
class EvaluationStrategy:
    def evaluate(self, model, dataset): pass

class DeepEvalStrategy(EvaluationStrategy):
    def evaluate(self, model, dataset):
        # Deepeval 로직

class EvAlchemyStrategy(EvaluationStrategy):
    def evaluate(self, model, dataset):
        # Evalchemy 로직
```

## 데이터 설계

### 데이터 파이프라인 패턴
1. **Extract**: 원본 데이터셋 수집
2. **Transform**: 중복 제거 및 정규화
3. **Load**: MinIO 저장 및 메타데이터 등록
4. **Validate**: 스키마 검증 및 품질 체크

### 결과 데이터 모델
```json
{
  "run_id": "uuid",
  "model_tag": "release-0.3.1",
  "timestamp": "2024-01-01T00:00:00Z",
  "deepeval_results": {
    "rag_precision": 0.85,
    "hallucination_rate": 0.12,
    "context_relevance": 0.78
  },
  "evalchemy_results": {
    "arc_easy": 0.75,
    "arc_challenge": 0.42,
    "hellaswag": 0.68,
    "mmlu": 0.58
  },
  "metadata": {
    "dataset_version": "sha256:abc123",
    "evaluation_time_seconds": 3600,
    "gpu_hours": 2.5
  }
}
```

## UI/UX 설계

### Grafana 대시보드 레이아웃
- **상단**: 전체 시스템 상태 및 최신 평가 결과
- **중단**: 시계열 메트릭 트렌드 (7일, 30일, 90일)
- **하단**: 모델별 상세 비교 및 Regression Alert

### Teams 알림 카드 설계
```json
{
  "type": "AdaptiveCard",
  "body": [{
    "type": "TextBlock",
    "text": "🚀 VLLM 평가 완료: release-0.3.1",
    "weight": "Bolder"
  }, {
    "type": "FactSet",
    "facts": [
      {"title": "전체 점수", "value": "78.5% (+2.3%)"},
      {"title": "실행 시간", "value": "1h 45m"},
      {"title": "상태", "value": "✅ 성공"}
    ]
  }],
  "actions": [{
    "type": "Action.OpenUrl",
    "title": "상세 보기",
    "url": "https://grafana.company.com/d/vllm-eval"
  }]
}
```

## 성능 최적화 설계

### 캐싱 전략
- **L1 Cache**: 인메모리 데이터셋 캐시 (Redis)
- **L2 Cache**: 처리된 결과 캐시 (MinIO)
- **L3 Cache**: CDN 기반 정적 자원 캐시

### 병렬 처리 설계
- **데이터 병렬성**: 데이터셋 청크 단위 분할 처리
- **모델 병렬성**: 여러 GPU를 활용한 동시 평가
- **파이프라인 병렬성**: Deepeval과 Evalchemy 동시 실행

## 보안 설계

### Defense in Depth
1. **네트워크**: NetworkPolicy 기반 트래픽 제어
2. **인증**: ServiceAccount + RBAC
3. **인가**: OPA Gatekeeper 정책 적용
4. **데이터**: 전송/저장 시 암호화
5. **감사**: 모든 작업 로그 기록

### Zero Trust 원칙
- **Never Trust**: 모든 요청 검증
- **Always Verify**: 지속적인 인증/인가
- **Least Privilege**: 최소 권한 부여
